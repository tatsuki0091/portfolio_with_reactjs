{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\"; // メール送信処理\n\nexport const fetchAsyncSendEmail = createAsyncThunk(\"send/email\", async values => {\n  console.log(res);\n  const res = await axios.get(`http://localhost:4000/send_email`, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.data;\n});\nexport const emailSlice = createSlice({\n  name: \"email\",\n  initialState: {\n    send: 0\n  },\n  reducers: {\n    sendEmail: state => {\n      console.log(\"ddd\"); // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: builder => {\n    // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n    // ログインが成功した場合はJWTをローカルストレージに格納\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\n      localStorage.setItem(\"localJWT\", action.payload.access);\n    });\n    builder.addCase(fetchAsyncCreateProf.fulfilled, (state, action) => {\n      state.myprofile = action.payload;\n    });\n    builder.addCase(fetchAsyncGetProfs.fulfilled, (state, action) => {\n      state.profiles = action.payload;\n    });\n    builder.addCase(fetchAsyncGetMyProf.fulfilled, (state, action) => {\n      state.myprofile = action.payload;\n    });\n  } // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  sendEmail,\n  decrement,\n  incrementByAmount\n} = emailSlice.actions;\nexport default emailSlice.reducer;","map":{"version":3,"sources":["/Users/Tatsuki/projects/react/portfolio/src/features/mail/emailSlice.js"],"names":["createSlice","createAsyncThunk","axios","fetchAsyncSendEmail","values","console","log","res","get","headers","data","emailSlice","name","initialState","send","reducers","sendEmail","state","value","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","fetchAsyncLogin","fulfilled","localStorage","setItem","access","fetchAsyncCreateProf","myprofile","fetchAsyncGetProfs","profiles","fetchAsyncGetMyProf","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,mBAAmB,GAAGF,gBAAgB,CACjD,YADiD,EAEjD,MAAOG,MAAP,IAAkB;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,QAAMA,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,kCAAX,EAA8C;AAC9DC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADqD,GAA9C,CAAlB;AAMA,SAAOF,GAAG,CAACG,IAAX;AACD,CAXgD,CAA5C;AAcP,OAAO,MAAMC,UAAU,GAAGX,WAAW,CAAC;AACpCY,EAAAA,IAAI,EAAE,OAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AADM,GAFsB;AAKpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpBZ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EADoB,CAEpB;AACA;AACA;AACA;;AACAW,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KARO;AASRC,IAAAA,SAAS,EAAGF,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAXO;AAYRE,IAAAA,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpCJ,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACD;AAdO,GAL0B;AAqBpCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACA;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBC,eAAe,CAACC,SAAhC,EAA2C,CAACV,KAAD,EAAQI,MAAR,KAAmB;AAC5DO,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCR,MAAM,CAACC,OAAP,CAAeQ,MAAhD;AACD,KAFD;AAIAN,IAAAA,OAAO,CAACC,OAAR,CAAgBM,oBAAoB,CAACJ,SAArC,EAAgD,CAACV,KAAD,EAAQI,MAAR,KAAmB;AACjEJ,MAAAA,KAAK,CAACe,SAAN,GAAkBX,MAAM,CAACC,OAAzB;AACD,KAFD;AAIAE,IAAAA,OAAO,CAACC,OAAR,CAAgBQ,kBAAkB,CAACN,SAAnC,EAA8C,CAACV,KAAD,EAAQI,MAAR,KAAmB;AAC/DJ,MAAAA,KAAK,CAACiB,QAAN,GAAiBb,MAAM,CAACC,OAAxB;AACD,KAFD;AAGAE,IAAAA,OAAO,CAACC,OAAR,CAAgBU,mBAAmB,CAACR,SAApC,EAA+C,CAACV,KAAD,EAAQI,MAAR,KAAmB;AAChEJ,MAAAA,KAAK,CAACe,SAAN,GAAkBX,MAAM,CAACC,OAAzB;AACD,KAFD;AAGD,GAtCmC,CAuCpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA/CoC,CAAD,CAA9B,C,CAkDP;;AACA,OAAO,MAAM;AAAEN,EAAAA,SAAF;AAAaG,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CT,UAAU,CAACyB,OAA/D;AAEP,eAAezB,UAAU,CAAC0B,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// メール送信処理\nexport const fetchAsyncSendEmail = createAsyncThunk(\n  \"send/email\",\n  async (values) => {\n    console.log(res);\n    const res = await axios.get(`http://localhost:4000/send_email`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    return res.data;\n  }\n);\n\nexport const emailSlice = createSlice({\n  name: \"email\",\n  initialState: {\n    send: 0,\n  },\n  reducers: {\n    sendEmail: (state) => {\n      console.log(\"ddd\");\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n    // ログインが成功した場合はJWTをローカルストレージに格納\n    builder.addCase(fetchAsyncLogin.fulfilled, (state, action) => {\n      localStorage.setItem(\"localJWT\", action.payload.access);\n    });\n\n    builder.addCase(fetchAsyncCreateProf.fulfilled, (state, action) => {\n      state.myprofile = action.payload;\n    });\n\n    builder.addCase(fetchAsyncGetProfs.fulfilled, (state, action) => {\n      state.profiles = action.payload;\n    });\n    builder.addCase(fetchAsyncGetMyProf.fulfilled, (state, action) => {\n      state.myprofile = action.payload;\n    });\n  },\n  // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n});\n\n// Action creators are generated for each case reducer function\nexport const { sendEmail, decrement, incrementByAmount } = emailSlice.actions;\n\nexport default emailSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}