{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState: {\n    send: 0\n  },\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  } // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/Tatsuki/projects/react/portfolio/src/features/counter/counterSlice.js"],"names":["createSlice","counterSlice","name","initialState","send","reducers","increment","state","value","decrement","incrementByAmount","action","payload","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;AACtCE,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AADM,GAFwB;AAKtCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB;AACA;AACA;AACA;AACAA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAPO;AAQRC,IAAAA,SAAS,EAAGF,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAVO;AAWRE,IAAAA,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpCJ,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACD;AAbO,GAL4B,CAoBtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA5BsC,CAAD,CAAhC,C,CA+BP;;AACA,OAAO,MAAM;AAAEN,EAAAA,SAAF;AAAaG,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CT,YAAY,CAACY,OAAjE;AAEP,eAAeZ,YAAY,CAACa,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  initialState: {\n    send: 0,\n  },\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}