{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\"; // メール送信処理\n\nexport const fetchAsyncSendEmail = createAsyncThunk(\"send/email\", async values => {\n  console.log(res);\n  const res = await axios.get(`http://localhost:4000/send_email`, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.data;\n});\nexport const emailSlice = createSlice({\n  name: \"email\",\n  initialState: {\n    send: 0,\n    result: false\n  },\n  reducers: {\n    sendEmail: state => {\n      console.log(\"ddd\"); // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n      state.result = action.payload;\n    });\n  } // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  sendEmail,\n  decrement,\n  incrementByAmount\n} = emailSlice.actions;\nexport default emailSlice.reducer;","map":{"version":3,"sources":["/Users/Tatsuki/projects/react/portfolio/src/features/mail/emailSlice.js"],"names":["createSlice","createAsyncThunk","axios","fetchAsyncSendEmail","values","console","log","res","get","headers","data","emailSlice","name","initialState","send","result","reducers","sendEmail","state","value","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,OAAO,MAAMC,mBAAmB,GAAGF,gBAAgB,CACjD,YADiD,EAEjD,MAAOG,MAAP,IAAkB;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,QAAMA,GAAG,GAAG,MAAML,KAAK,CAACM,GAAN,CAAW,kCAAX,EAA8C;AAC9DC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADqD,GAA9C,CAAlB;AAMA,SAAOF,GAAG,CAACG,IAAX;AACD,CAXgD,CAA5C;AAcP,OAAO,MAAMC,UAAU,GAAGX,WAAW,CAAC;AACpCY,EAAAA,IAAI,EAAE,OAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE,CADM;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAFsB;AAMpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpBb,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EADoB,CAEpB;AACA;AACA;AACA;;AACAY,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KARO;AASRC,IAAAA,SAAS,EAAGF,KAAD,IAAW;AACpBA,MAAAA,KAAK,CAACC,KAAN,IAAe,CAAf;AACD,KAXO;AAYRE,IAAAA,iBAAiB,EAAE,CAACH,KAAD,EAAQI,MAAR,KAAmB;AACpCJ,MAAAA,KAAK,CAACC,KAAN,IAAeG,MAAM,CAACC,OAAtB;AACD;AAdO,GAN0B;AAsBpCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,mBAAmB,CAACwB,SAApC,EAA+C,CAACT,KAAD,EAAQI,MAAR,KAAmB;AAChEJ,MAAAA,KAAK,CAACH,MAAN,GAAeO,MAAM,CAACC,OAAtB;AACD,KAFD;AAGD,GA1BmC,CA2BpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnCoC,CAAD,CAA9B,C,CAsCP;;AACA,OAAO,MAAM;AAAEN,EAAAA,SAAF;AAAaG,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CV,UAAU,CAACiB,OAA/D;AAEP,eAAejB,UAAU,CAACkB,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// メール送信処理\nexport const fetchAsyncSendEmail = createAsyncThunk(\n  \"send/email\",\n  async (values) => {\n    console.log(res);\n    const res = await axios.get(`http://localhost:4000/send_email`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    return res.data;\n  }\n);\n\nexport const emailSlice = createSlice({\n  name: \"email\",\n  initialState: {\n    send: 0,\n    result: false,\n  },\n  reducers: {\n    sendEmail: (state) => {\n      console.log(\"ddd\");\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n      state.result = action.payload;\n    });\n  },\n  // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n});\n\n// Action creators are generated for each case reducer function\nexport const { sendEmail, decrement, incrementByAmount } = emailSlice.actions;\n\nexport default emailSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}