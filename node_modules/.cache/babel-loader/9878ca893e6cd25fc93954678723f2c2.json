{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { RootState } from \"../../app/store\";\nconst apiURL = process.env.SEND_EMAIL; // メール送信処理\n\nexport const fetchAsyncSendEmail = createAsyncThunk(\"send/email\", async values => {\n  console.log(res);\n  const res = await axios.get(`http://localhost:4000/send_email`, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return res.data;\n});\nconst emailSlice = createSlice({\n  name: \"email\",\n  initialState: {\n    send: false\n  },\n  // reducers: {},\n  // extraReducer追加\n  extraReducers: builder => {\n    // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n    // ログインが成功した場合はJWTをローカルストレージに格納\n    builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n      localStorage.setItem(\"localJWT\", action.payload.access);\n    });\n  } // extraReducer追加\n\n});\nconsole.log(emailSlice); // export const { fetchAsyncSendEmail } = emailSlice.actions;\n// Reducerをエクスポートする\n\nexport default emailSlice;","map":{"version":3,"sources":["/Users/Tatsuki/projects/react/portfolio/src/features/email/emailSlice.js"],"names":["createSlice","createAsyncThunk","axios","RootState","apiURL","process","env","SEND_EMAIL","fetchAsyncSendEmail","values","console","log","res","get","headers","data","emailSlice","name","initialState","send","extraReducers","builder","addCase","fulfilled","state","action","localStorage","setItem","payload","access"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA3B,C,CAEA;;AACA,OAAO,MAAMC,mBAAmB,GAAGP,gBAAgB,CACjD,YADiD,EAEjD,MAAOQ,MAAP,IAAkB;AAChBC,EAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,QAAMA,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAW,kCAAX,EAA8C;AAC9DC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADqD,GAA9C,CAAlB;AAMA,SAAOF,GAAG,CAACG,IAAX;AACD,CAXgD,CAA5C;AAaP,MAAMC,UAAU,GAAGhB,WAAW,CAAC;AAC7BiB,EAAAA,IAAI,EAAE,OADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,IAAI,EAAE;AADM,GAFe;AAK7B;AACA;AACAC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1B;AACA;AACAA,IAAAA,OAAO,CAACC,OAAR,CAAgBd,mBAAmB,CAACe,SAApC,EAA+C,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChEC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,MAAM,CAACG,OAAP,CAAeC,MAAhD;AACD,KAFD;AAGD,GAb4B,CAc7B;;AAd6B,CAAD,CAA9B;AAiBAnB,OAAO,CAACC,GAAR,CAAYK,UAAZ,E,CAEA;AAEA;;AACA,eAAeA,UAAf","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { RootState } from \"../../app/store\";\n\nconst apiURL = process.env.SEND_EMAIL;\n\n// メール送信処理\nexport const fetchAsyncSendEmail = createAsyncThunk(\n  \"send/email\",\n  async (values) => {\n    console.log(res);\n    const res = await axios.get(`http://localhost:4000/send_email`, {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    });\n\n    return res.data;\n  }\n);\nconst emailSlice = createSlice({\n  name: \"email\",\n  initialState: {\n    send: false,\n  },\n  // reducers: {},\n  // extraReducer追加\n  extraReducers: (builder) => {\n    // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n    // ログインが成功した場合はJWTをローカルストレージに格納\n    builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n      localStorage.setItem(\"localJWT\", action.payload.access);\n    });\n  },\n  // extraReducer追加\n});\n\nconsole.log(emailSlice);\n\n// export const { fetchAsyncSendEmail } = emailSlice.actions;\n\n// Reducerをエクスポートする\nexport default emailSlice;\n"]},"metadata":{},"sourceType":"module"}