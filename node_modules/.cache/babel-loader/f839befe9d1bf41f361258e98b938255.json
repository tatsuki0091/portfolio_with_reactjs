{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const emailSlice = createSlice({\n  name: \"email\",\n  initialState: {},\n  reducers: {\n    increment: state => {\n      console.log(\"ddd\"); // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n\n      state.value += 1;\n    }\n  } // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n\n}); // Action creators are generated for each case reducer function\n\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = emailSlice.actions;\nexport default emailSlice.reducer;","map":{"version":3,"sources":["/Users/Tatsuki/projects/react/portfolio/src/features/mail/emailSlice.js"],"names":["createSlice","emailSlice","name","initialState","reducers","increment","state","console","log","value","decrement","incrementByAmount","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,UAAU,GAAGD,WAAW,CAAC;AACpCE,EAAAA,IAAI,EAAE,OAD8B;AAEpCC,EAAAA,YAAY,EAAE,EAFsB;AAGpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAGC,KAAD,IAAW;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EADoB,CAEpB;AACA;AACA;AACA;;AACAF,MAAAA,KAAK,CAACG,KAAN,IAAe,CAAf;AACD;AARO,GAH0B,CAapC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArBoC,CAAD,CAA9B,C,CAwBP;;AACA,OAAO,MAAM;AAAEJ,EAAAA,SAAF;AAAaK,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CV,UAAU,CAACW,OAA/D;AAEP,eAAeX,UAAU,CAACY,OAA1B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const emailSlice = createSlice({\n  name: \"email\",\n  initialState: {},\n  reducers: {\n    increment: (state) => {\n      console.log(\"ddd\");\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n  },\n  // extraReducer追加\n  // extraReducers: (builder) => {\n  //   // fetchAsyncLoginメソッドがfulfilledだった場合の処理\n  //   // ログインが成功した場合はJWTをローカルストレージに格納\n  //   builder.addCase(fetchAsyncSendEmail.fulfilled, (state, action) => {\n  //     localStorage.setItem(\"localJWT\", action.payload.access);\n  //   });\n  // },\n  // extraReducer追加\n});\n\n// Action creators are generated for each case reducer function\nexport const { increment, decrement, incrementByAmount } = emailSlice.actions;\n\nexport default emailSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}